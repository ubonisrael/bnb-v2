import { Ref, RefObject, useState } from "react";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { minutesToTimeString, timezones } from "@/utils/time";
import { UseFormReturn } from "react-hook-form";
import { Textarea } from "./textarea";
import { Button } from "./button";
import { PolicyPreviewModal } from "./policy-preview-modal";
import { generateBookingPolicy } from "@/utils/policy";
import { PolicyManager } from "../settings/policy-manager";
import { BreakTimesManager } from "../settings/break-times-manager";
import { OffDaysManager } from "../settings/off-days-manager";
import { UseMutationResult } from "@tanstack/react-query";
import { BusinessSettingsResponse } from "@/types/response";
import { Loader2 } from "lucide-react";

export const days = [
  { id: "monday", label: "Monday" },
  { id: "tuesday", label: "Tuesday" },
  { id: "wednesday", label: "Wednesday" },
  { id: "thursday", label: "Thursday" },
  { id: "friday", label: "Friday" },
  { id: "saturday", label: "Saturday" },
  { id: "sunday", label: "Sunday" },
];

export function BookingSettingsForm({
  form,
  formRef,
  onSubmit,
  onError,
  settingsLoading,
  updateBookingSettingsMutation,
}: {
  form: UseFormReturn<BookingSettingsData>;
  formRef: RefObject<HTMLFormElement | null>;
  onSubmit?: (values: any) => Promise<void>;
  onError?: (errors: any) => void;
  settingsLoading?: boolean;
  updateBookingSettingsMutation?: UseMutationResult<
    BusinessSettingsResponse,
    Error,
    any,
    void
  >;
}) {
  const [previewType, setPreviewType] = useState<
    "deposit" | "cancellation" | "rescheduling" | "no_show" | null
  >(null);

  const watchDeposits = form.watch("allow_deposits");
  const watchCancellationAllowed = form.watch("cancellation_allowed");
  const watchRescheduleAllowed = form.watch("reschedule_allowed");
  const watchAutoGenerateDeposit = form.watch("auto_generate_deposit_policy");
  const watchAutoGenerateCancellation = form.watch(
    "auto_generate_cancellation_policy"
  );
  const watchAutoGenerateReschedule = form.watch(
    "auto_generate_reschedule_policy"
  );
  const watchAutoGenerateNoShow = form.watch("auto_generate_no_show_policy");

  const getPreviewPolicies = (type: typeof previewType) => {
    if (!type) return [];
    return generateBookingPolicy(form.getValues(), type);
  };
  return (
    <Form {...form}>
      <form
        ref={formRef}
        onSubmit={() => {
          if (onSubmit && onError) {
            return form.handleSubmit(onSubmit, onError);
          }
        }}
        className="space-y-4 md:space-y-6 xl:space-y-8"
      >
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-[#121212]">
            Booking Settings and Policy Setup
          </h2>
          <p className="text-sm text-[#6E6E73]">
            Configure your booking settings, including the welcome message sent
            upon booking confirmation, available days with their opening and
            closing times, and the minimum and maximum number of days in advance
            that bookings can be made.
          </p>
        </div>
        <FormField
          control={form.control}
          name="welcome_message"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Welcome Message</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Message sent to your clients upon confirmation of booking."
                  {...field}
                />
              </FormControl>
              <FormDescription>
                Message sent to your clients upon confirmation of booking
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="time_zone"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Time Zone</FormLabel>
              <FormControl>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  name="time_zone"
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a time zone" />
                  </SelectTrigger>
                  <SelectContent>
                    {timezones.map((timezone) => (
                      <SelectItem key={timezone} value={timezone}>
                        {timezone}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </FormControl>
              <FormDescription>
                Select the time zone for your booking settings
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="time_slot_duration"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Time Slot Duration</FormLabel>
              <FormControl>
                <Select
                  onValueChange={(value) => {
                    field.onChange(Number(value));
                  }}
                  defaultValue={`${field.value ?? 30}`}
                  name="time_slot_duration"
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a time " />
                  </SelectTrigger>
                  <SelectContent>
                    {[30, 45, 60, 75, 90, 120].map((duration) => (
                      <SelectItem key={duration} value={duration.toString()}>
                        {`${duration} minutes`}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </FormControl>
              <FormDescription>
                Define the spacing between available booking times. This sets
                how frequently time slots appear on the schedule — it does not
                determine how long an appointment lasts.
                <br />
                <br />
                For example, with a 30-minute interval:
                <br />• Morning: 8:00, 8:30, 9:00
                <br />• Afternoon: 2:00, 2:30, 3:00
                <br />
                <br />
                Choose an interval that matches how flexibly you want users to
                book within your working hours.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="minimum_notice"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Minimum Notice</FormLabel>
              <FormControl>
                <Input
                  name="minimum_notice"
                  type="number"
                  placeholder="0"
                  value={
                    field.value ? field.value : field.value === 0 ? "0" : ""
                  }
                  onChange={(e) => {
                    const value = e.target.value;
                    field.onChange(Number(value));
                    if (value.startsWith("0") && value !== "0") {
                      e.target.value = value.replace(/^0+/, "");
                    }
                  }}
                />
              </FormControl>
              <FormDescription>
                Enter the minimum number of days required before a customer can
                book an appointment. For example, if set to 2, the earliest
                available booking will be two days from today.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="maximum_notice"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Maximum Notice</FormLabel>
              <FormControl>
                <Input
                  type="number"
                  name="maximum_notice"
                  placeholder="0"
                  value={
                    field.value ? field.value : field.value === 0 ? "0" : ""
                  }
                  onChange={(e) => {
                    const value = e.target.value;
                    field.onChange(Number(value));
                    if (value.startsWith("0") && value !== "0") {
                      e.target.value = value.replace(/^0+/, "");
                    }
                  }}
                />
              </FormControl>
              <FormDescription>
                Enter the maximum number of days from the current day within
                which a customer can book an appointment. For example, if set to
                14, the latest available booking will be 14 days from today.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        {/* Service Charge Options */}
        <FormField
          control={form.control}
          name="absorb_service_charge"
          render={({ field }) => (
            <FormItem className="flex items-center justify-between space-y-0 border p-3 rounded-lg">
              <div className="w-full space-y-0.5">
                <div className="flex items-center justify-between">
                  <FormLabel>Absorb Service Charge</FormLabel>
                  <FormControl>
                    <Switch
                      name="absorb_service_charge"
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </div>
                <FormDescription>
                  Enable this option if you want to absorb the service charge
                  instead of passing it to your customers.
                  <br />
                  When enabled, the maximum of £1 and 2.9% + £0.80 will be
                  deducted from your settlement amount as the processing fee.
                  <br />
                  When disabled, the fee will be added to the customer's total
                  payment.
                  <br />
                  <br />
                  <strong>
                    Example 1 (service fee charge not absorbed):
                  </strong>{" "}
                  You allow a £5 deposit.
                  <br />➤ The customer pays £6 (£5 deposit + £1 service charge
                  fee).
                  <br />➤ You receive the full £5 deposit at settlement.
                  <br />
                  <br />
                  <strong>
                    Example 2 (service fee charge not absorbed):
                  </strong>{" "}
                  You allow a £10 deposit.
                  <br />➤ The customer pays £11.13 (£10 deposit + £1.13 service
                  charge fee).
                  <br />➤ You receive the full £10 deposit at settlement.
                  <br />
                  <br />
                  <strong>Example 3 (service fee charge absorbed):</strong> You
                  allow a £10 deposit.
                  <br />➤ The customer pays £10.
                  <br />➤ A service fee of £1.09 is applied.
                  <br />➤ You receive £10 - £1.09 = <strong>£8.91</strong> at
                  settlement.
                </FormDescription>
              </div>
            </FormItem>
          )}
        />
        <div className="space-y-1 md:space-y-2">
          {/* Allow Deposits Toggle */}
          <FormField
            control={form.control}
            name="allow_deposits"
            render={({ field }) => (
              <FormItem className="flex items-center justify-between space-y-0 border p-3 rounded-lg">
                <div className="w-full space-y-0.5">
                  <div className="flex items-center justify-between">
                    <FormLabel>Allow Deposits</FormLabel>{" "}
                    <FormControl>
                      <Switch
                        name="allow_deposits"
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </div>
                  <FormDescription>
                    Enable this option to require only a portion of the total
                    service fee upfront.
                  </FormDescription>
                </div>
              </FormItem>
            )}
          />

          {watchDeposits && (
            <>
              <FormField
                control={form.control}
                name="deposit_amount"
                disabled={!watchDeposits}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Deposit Amount</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="e.g. 30"
                        {...field}
                        value={
                          field.value
                            ? field.value
                            : field.value === 0
                            ? "0"
                            : ""
                        }
                        onChange={(e) => {
                          const value = e.target.value;
                          field.onChange(Number(value));
                          if (value.startsWith("0") && value !== "0") {
                            e.target.value = value.replace(/^0+/, "");
                          }
                        }}
                      />
                    </FormControl>
                    <FormDescription>
                      Specify the minimum amout required for a deposit. Should
                      not be less than 5.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <FormField
              control={form.control}
              name="auto_generate_deposit_policy"
              render={({ field }) => (
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormLabel className="!mt-0">
                    Auto-generate deposit policies
                  </FormLabel>
                </FormItem>
              )}
            />
            <Button
              type="button"
              variant="outline"
              onClick={() => setPreviewType("deposit")}
              disabled={!watchAutoGenerateDeposit}
            >
              Preview Policies
            </Button>
          </div>
        </div>

        <div className="space-y-1 md:space-y-2">
          {/* Cancellation */}
          <FormField
            control={form.control}
            name="cancellation_allowed"
            render={({ field }) => (
              <FormItem className="flex items-center justify-between space-y-0 border p-3 rounded-lg">
                <div className="space-y-0.5">
                  <FormLabel>Allow Cancellation</FormLabel>
                  <FormDescription>
                    Enable this option to allow your clients to cancel bookings.
                  </FormDescription>
                </div>
                <FormControl>
                  <Switch
                    name="cancellation_allowed"
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          {watchCancellationAllowed && (
            <>
              <FormField
                control={form.control}
                name="cancellation_notice_hours"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cancellation Notice (Hours)</FormLabel>
                    <div className="space-y-2">
                      <div>
                        <FormLabel className="text-sm text-muted-foreground">
                          Common durations
                        </FormLabel>
                        <Select
                          name="cancellation_notice_hours_preset"
                          onValueChange={(value) => {
                            if (value === "custom") {
                              return;
                            }
                            field.onChange(Number(value));
                          }}
                          value={
                            [0, 1, 2, 4, 8, 12, 24, 48, 72].includes(
                              Number(field.value)
                            )
                              ? field.value?.toString()
                              : "custom"
                          }
                        >
                          <FormControl>
                            <SelectTrigger className="w-full">
                              <SelectValue placeholder="Select a preset duration" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="0">
                              No notice required
                            </SelectItem>
                            <SelectItem value="1">1 hour</SelectItem>
                            <SelectItem value="2">2 hours</SelectItem>
                            <SelectItem value="4">4 hours</SelectItem>
                            <SelectItem value="8">8 hours</SelectItem>
                            <SelectItem value="12">12 hours</SelectItem>
                            <SelectItem value="24">24 hours (1 day)</SelectItem>
                            <SelectItem value="48">
                              48 hours (2 days)
                            </SelectItem>
                            <SelectItem value="72">
                              72 hours (3 days)
                            </SelectItem>
                            <SelectItem value="custom">Custom</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <FormLabel className="text-sm text-muted-foreground">
                          Custom duration (enter hours directly)
                        </FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="0"
                            placeholder="Enter custom hours"
                            className="w-full"
                            value={
                              field.value
                                ? field.value
                                : field.value === 0
                                ? "0"
                                : ""
                            }
                            onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(Number(value));
                              if (value.startsWith("0") && value !== "0") {
                                e.target.value = value.replace(/^0+/, "");
                              }
                            }}
                          />
                        </FormControl>
                      </div>
                    </div>
                    <FormDescription>
                      Choose a preset duration or enter custom hours directly in
                      the input field above. This sets how many hours in advance
                      clients must notify you to cancel their booking without
                      incurring a penalty.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="cancellation_fee_percent"
                disabled={!watchCancellationAllowed}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cancellation Fee (%)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="e.g. 30"
                        {...field}
                        value={
                          field.value
                            ? field.value
                            : field.value === 0
                            ? "0"
                            : ""
                        }
                        onChange={(e) => {
                          const value = e.target.value;
                          field.onChange(Number(value));
                          if (value.startsWith("0") && value !== "0") {
                            e.target.value = value.replace(/^0+/, "");
                          }
                        }}
                      />
                    </FormControl>
                    <FormDescription>
                      Set the percentage of the booking fee charged as
                      cancellation penalty
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <FormField
              control={form.control}
              name="auto_generate_cancellation_policy"
              render={({ field }) => (
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormLabel className="!mt-0">
                    Auto-generate cancellation policies
                  </FormLabel>
                </FormItem>
              )}
            />
            <Button
              type="button"
              variant="outline"
              onClick={() => setPreviewType("cancellation")}
              disabled={!watchAutoGenerateCancellation}
            >
              Preview Policies
            </Button>
          </div>
          <FormField
            control={form.control}
            name="reschedule_allowed"
            render={({ field }) => (
              <FormItem className="flex items-center justify-between space-y-0 border p-3 rounded-lg">
                <div className="space-y-0.5">
                  <FormLabel>Allow Rescheduling</FormLabel>
                  <FormDescription>
                    Enable this option to allow your clients to reschedule
                    bookings.
                  </FormDescription>
                </div>
                <FormControl>
                  <Switch
                    name="reschedule_allowed"
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
        </div>

        <div className="space-y-1 md:space-y-2">
          {watchRescheduleAllowed && (
            <>
              <FormField
                control={form.control}
                name="reschedule_notice_hours"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Rescheduling Notice (Hours)</FormLabel>
                    <div className="space-y-2">
                      <div>
                        <FormLabel className="text-sm text-muted-foreground">
                          Common durations
                        </FormLabel>
                        <Select
                          name="reschedule_notice_hours_preset"
                          onValueChange={(value) => {
                            if (value === "custom") {
                              return; // Don't update the field value for custom option
                            }
                            field.onChange(Number(value));
                          }}
                          value={
                            [0, 1, 2, 4, 8, 12, 24, 48, 72].includes(
                              Number(field.value)
                            )
                              ? field.value?.toString()
                              : "custom"
                          }
                        >
                          <FormControl>
                            <SelectTrigger className="w-full">
                              <SelectValue placeholder="Select a preset duration" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="0">
                              No notice required
                            </SelectItem>
                            <SelectItem value="1">1 hour</SelectItem>
                            <SelectItem value="2">2 hours</SelectItem>
                            <SelectItem value="4">4 hours</SelectItem>
                            <SelectItem value="8">8 hours</SelectItem>
                            <SelectItem value="12">12 hours</SelectItem>
                            <SelectItem value="24">24 hours (1 day)</SelectItem>
                            <SelectItem value="48">
                              48 hours (2 days)
                            </SelectItem>
                            <SelectItem value="72">
                              72 hours (3 days)
                            </SelectItem>
                            <SelectItem value="custom">Custom</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <FormLabel className="text-sm text-muted-foreground">
                          Custom duration (enter hours directly)
                        </FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="0"
                            placeholder="Enter custom hours"
                            className="w-full"
                            value={
                              field.value
                                ? field.value
                                : field.value === 0
                                ? "0"
                                : ""
                            }
                            onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(Number(value));
                              if (value.startsWith("0") && value !== "0") {
                                e.target.value = value.replace(/^0+/, "");
                              }
                            }}
                          />
                        </FormControl>
                      </div>
                    </div>
                    <FormDescription>
                      Choose a preset duration or enter custom hours directly in
                      the input field above. This sets how many hours in advance
                      clients must notify you to reschedule their booking
                      without incurring a penalty.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="reschedule_fee_percent"
                disabled={!watchRescheduleAllowed}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Reschedule Fee (%)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="e.g. 30"
                        {...field}
                        value={
                          field.value
                            ? field.value
                            : field.value === 0
                            ? "0"
                            : ""
                        }
                        onChange={(e) => {
                          const value = e.target.value;
                          field.onChange(Number(value));
                          if (value.startsWith("0") && value !== "0") {
                            e.target.value = value.replace(/^0+/, "");
                          }
                        }}
                      />
                    </FormControl>
                    <FormDescription>
                      Set the percentage of the booking fee charged as
                      rescheduling penalty
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <FormField
              control={form.control}
              name="auto_generate_reschedule_policy"
              render={({ field }) => (
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormLabel className="!mt-0">
                    Auto-generate reschedule policies
                  </FormLabel>
                </FormItem>
              )}
            />
            <Button
              type="button"
              variant="outline"
              onClick={() => setPreviewType("rescheduling")}
              disabled={!watchAutoGenerateReschedule}
            >
              Preview Policies
            </Button>
          </div>
        </div>

        <div className="space-y-1 md:space-y-2">
          <FormField
            control={form.control}
            name="no_show_fee_percent"
            render={({ field }) => (
              <FormItem className="flex items-center justify-between space-y-0 border p-3 rounded-lg">
                <div className="space-y-0.5">
                  <FormLabel>No-Show Fee (%)</FormLabel>
                  <FormDescription>
                    Percentage of booking fee charged when clients don't show up
                    for their appointment
                  </FormDescription>
                </div>
                <FormControl>
                  <Input
                    type="number"
                    placeholder="e.g. 30"
                    {...field}
                    value={
                      field.value ? field.value : field.value === 0 ? "0" : ""
                    }
                    onChange={(e) => {
                      const value = e.target.value;
                      field.onChange(Number(value));
                      if (value.startsWith("0") && value !== "0") {
                        e.target.value = value.replace(/^0+/, "");
                      }
                    }}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
            <FormField
              control={form.control}
              name="auto_generate_no_show_policy"
              render={({ field }) => (
                <FormItem className="flex items-center space-x-2">
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormLabel className="!mt-0">
                    Auto-generate no-show policies
                  </FormLabel>
                </FormItem>
              )}
            />
            <Button
              type="button"
              variant="outline"
              onClick={() => setPreviewType("no_show")}
              disabled={!watchAutoGenerateNoShow}
            >
              Preview Policies
            </Button>
          </div>
        </div>

        <PolicyPreviewModal
          isOpen={!!previewType}
          onClose={() => setPreviewType(null)}
          policies={getPreviewPolicies(previewType)}
          title={
            previewType
              ? `${previewType.charAt(0).toUpperCase()}${previewType.slice(1)}`
              : ""
          }
        />

        <FormField
          control={form.control}
          name="custom_policies"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Custom Policies</FormLabel>
              <FormControl>
                <PolicyManager form={form} field={field} />
              </FormControl>
              <FormDescription>
                Add custom policies for your business. Each policy must belong
                to a category (title).
                <br />
                General policies for deposits, cancellations, rescheduling and
                no shows will be generated based on your settings above. Specify
                any additional rules, or special requirements that clients
                should know before booking. This helps set clear expectations
                and ensures smooth service delivery.
              </FormDescription>
            </FormItem>
          )}
        />

        {/* Booking Days Section */}
        <div className="mb-6">
          <h3 className="font-medium text-[#121212]">Booking Days & Hours</h3>
          <p className="text-sm text-[#6E6E73]">
            Set up your business working hours and availability
          </p>
        </div>
        <div className="space-y-4">
          {days.map((day) => (
            <FormField
              key={day.id}
              control={form.control}
              name={`${day.id}_enabled` as keyof BookingSettingsData}
              render={({ field }) => (
                <FormItem>
                  <Card className="border-[#E0E0E5]">
                    <CardContent className="pt-6">
                      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2">
                        <div className="flex items-center space-x-4">
                          <FormControl>
                            <Switch
                              name={
                                `${day.id}_enabled` as keyof BookingSettingsData
                              }
                              checked={Boolean(field.value)}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                          <Label className="text-sm font-medium">
                            {day.label}
                          </Label>
                        </div>
                        {field.value && (
                          <div className="flex flex-col md:flex-row md:items-center md:space-x-4 gap-2 md:gap-0">
                            <FormField
                              control={form.control}
                              name={
                                `${day.id}_opening` as keyof BookingSettingsData
                              }
                              render={({ field: openingField }) => {
                                return (
                                  <FormControl>
                                    <Input
                                      name={
                                        `${day.id}_opening` as keyof BookingSettingsData
                                      }
                                      type="time"
                                      value={minutesToTimeString(
                                        openingField.value as number
                                      )}
                                      onChange={(e) => {
                                        const [h, m] = e.target.value
                                          .split(":")
                                          .map(Number);
                                        openingField.onChange(h * 60 + m);
                                      }}
                                      className="w-32"
                                    />
                                  </FormControl>
                                );
                              }}
                            />
                            <span className="text-sm text-[#6E6E73]">to</span>
                            <FormField
                              control={form.control}
                              name={
                                `${day.id}_closing` as keyof BookingSettingsData
                              }
                              render={({ field: closingField }) => (
                                <div className="w-32 flex flex-col">
                                  <FormControl className="self-end">
                                    <Input
                                      name={
                                        `${day.id}_closing` as keyof BookingSettingsData
                                      }
                                      type="time"
                                      value={minutesToTimeString(
                                        closingField.value as number
                                      )}
                                      onChange={(e) => {
                                        const [h, m] = e.target.value
                                          .split(":")
                                          .map(Number);
                                        closingField.onChange(h * 60 + m);
                                      }}
                                      className="w-32"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </div>
                              )}
                            />
                          </div>
                        )}
                      </div>
                      {field.value && (
                        <div className="mt-4">
                          <BreakTimesManager
                            form={form}
                            breakTimes={form.watch("break_times") || []}
                            dayId={day.id}
                          />
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </FormItem>
              )}
            />
          ))}
        </div>
        {/* Add Off Days Manager */}
        <FormField
          control={form.control}
          name="special_off_days"
          render={({ field }) => (
            <FormItem>
              <FormControl>
                <OffDaysManager
                  form={form}
                  offDays={field.value || []}
                  onAdd={(offDay) => {
                    const newOffDays = [...(field.value || [])];
                    const index = newOffDays.findIndex(
                      (d) => d.id === offDay.id
                    );
                    if (index >= 0) {
                      newOffDays[index] = offDay;
                    } else {
                      newOffDays.push(offDay);
                    }
                    field.onChange(newOffDays);
                  }}
                  onRemove={(id) => {
                    field.onChange(
                      (field.value || []).filter((d) => d.id !== id)
                    );
                  }}
                />
              </FormControl>
              <FormDescription>
                Set specific dates when your business will be closed
              </FormDescription>
            </FormItem>
          )}
        />
        {updateBookingSettingsMutation && (
          <div className="flex justify-end">
            <Button
              type="submit"
              disabled={
                updateBookingSettingsMutation.isPending || settingsLoading
              }
            >
              {updateBookingSettingsMutation.isPending ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </Button>
          </div>
        )}
      </form>
    </Form>
  );
}
